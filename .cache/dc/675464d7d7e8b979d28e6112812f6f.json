{"id":"node_modules/concaveman/index.js","dependencies":[{"name":"/Users/carleinarsson/Documents/2dv50e_visualization/package.json","includedInParent":true,"mtime":1589121058206},{"name":"/Users/carleinarsson/Documents/2dv50e_visualization/node_modules/concaveman/package.json","includedInParent":true,"mtime":1589119866019},{"name":"rbush","loc":{"line":3,"column":20},"parent":"/Users/carleinarsson/Documents/2dv50e_visualization/node_modules/concaveman/index.js","resolved":"/Users/carleinarsson/Documents/2dv50e_visualization/node_modules/rbush/index.js"},{"name":"monotone-convex-hull-2d","loc":{"line":4,"column":25},"parent":"/Users/carleinarsson/Documents/2dv50e_visualization/node_modules/concaveman/index.js","resolved":"/Users/carleinarsson/Documents/2dv50e_visualization/node_modules/monotone-convex-hull-2d/index.js"},{"name":"tinyqueue","loc":{"line":5,"column":20},"parent":"/Users/carleinarsson/Documents/2dv50e_visualization/node_modules/concaveman/index.js","resolved":"/Users/carleinarsson/Documents/2dv50e_visualization/node_modules/tinyqueue/index.js"},{"name":"point-in-polygon","loc":{"line":6,"column":29},"parent":"/Users/carleinarsson/Documents/2dv50e_visualization/node_modules/concaveman/index.js","resolved":"/Users/carleinarsson/Documents/2dv50e_visualization/node_modules/point-in-polygon/index.js"},{"name":"robust-orientation","loc":{"line":7,"column":21},"parent":"/Users/carleinarsson/Documents/2dv50e_visualization/node_modules/concaveman/index.js","resolved":"/Users/carleinarsson/Documents/2dv50e_visualization/node_modules/robust-orientation/orientation.js"}],"generated":{"js":"'use strict';\n\nvar rbush = require('rbush');\nvar convexHull = require('monotone-convex-hull-2d');\nvar Queue = require('tinyqueue');\nvar pointInPolygon = require('point-in-polygon');\nvar orient = require('robust-orientation')[3];\n\nmodule.exports = concaveman;\nmodule.exports.default = concaveman;\n\nfunction concaveman(points, concavity, lengthThreshold) {\n    // a relative measure of concavity; higher value means simpler hull\n    concavity = Math.max(0, concavity === undefined ? 2 : concavity);\n\n    // when a segment goes below this length threshold, it won't be drilled down further\n    lengthThreshold = lengthThreshold || 0;\n\n    // start with a convex hull of the points\n    var hull = fastConvexHull(points);\n\n    // index the points with an R-tree\n    var tree = rbush(16, ['[0]', '[1]', '[0]', '[1]']).load(points);\n\n    // turn the convex hull into a linked list and populate the initial edge queue with the nodes\n    var queue = [];\n    for (var i = 0, last; i < hull.length; i++) {\n        var p = hull[i];\n        tree.remove(p);\n        last = insertNode(p, last);\n        queue.push(last);\n    }\n\n    // index the segments with an R-tree (for intersection checks)\n    var segTree = rbush(16);\n    for (i = 0; i < queue.length; i++) segTree.insert(updateBBox(queue[i]));\n\n    var sqConcavity = concavity * concavity;\n    var sqLenThreshold = lengthThreshold * lengthThreshold;\n\n    // process edges one by one\n    while (queue.length) {\n        var node = queue.shift();\n        var a = node.p;\n        var b = node.next.p;\n\n        // skip the edge if it's already short enough\n        var sqLen = getSqDist(a, b);\n        if (sqLen < sqLenThreshold) continue;\n\n        var maxSqLen = sqLen / sqConcavity;\n\n        // find the best connection point for the current edge to flex inward to\n        p = findCandidate(tree, node.prev.p, a, b, node.next.next.p, maxSqLen, segTree);\n\n        // if we found a connection and it satisfies our concavity measure\n        if (p && Math.min(getSqDist(p, a), getSqDist(p, b)) <= maxSqLen) {\n            // connect the edge endpoints through this point and add 2 new edges to the queue\n            queue.push(node);\n            queue.push(insertNode(p, node));\n\n            // update point and segment indexes\n            tree.remove(p);\n            segTree.remove(node);\n            segTree.insert(updateBBox(node));\n            segTree.insert(updateBBox(node.next));\n        }\n    }\n\n    // convert the resulting hull linked list to an array of points\n    node = last;\n    var concave = [];\n    do {\n        concave.push(node.p);\n        node = node.next;\n    } while (node !== last);\n\n    concave.push(node.p);\n\n    return concave;\n}\n\nfunction findCandidate(tree, a, b, c, d, maxDist, segTree) {\n    var queue = new Queue(null, compareDist);\n    var node = tree.data;\n\n    // search through the point R-tree with a depth-first search using a priority queue\n    // in the order of distance to the edge (b, c)\n    while (node) {\n        for (var i = 0; i < node.children.length; i++) {\n            var child = node.children[i];\n\n            var dist = node.leaf ? sqSegDist(child, b, c) : sqSegBoxDist(b, c, child);\n            if (dist > maxDist) continue; // skip the node if it's farther than we ever need\n\n            queue.push({\n                node: child,\n                dist: dist\n            });\n        }\n\n        while (queue.length && !queue.peek().node.children) {\n            var item = queue.pop();\n            var p = item.node;\n\n            // skip all points that are as close to adjacent edges (a,b) and (c,d),\n            // and points that would introduce self-intersections when connected\n            var d0 = sqSegDist(p, a, b);\n            var d1 = sqSegDist(p, c, d);\n            if (item.dist < d0 && item.dist < d1 &&\n                noIntersections(b, p, segTree) &&\n                noIntersections(c, p, segTree)) return p;\n        }\n\n        node = queue.pop();\n        if (node) node = node.node;\n    }\n\n    return null;\n}\n\nfunction compareDist(a, b) {\n    return a.dist - b.dist;\n}\n\n// square distance from a segment bounding box to the given one\nfunction sqSegBoxDist(a, b, bbox) {\n    if (inside(a, bbox) || inside(b, bbox)) return 0;\n    var d1 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.maxX, bbox.minY);\n    if (d1 === 0) return 0;\n    var d2 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.minX, bbox.maxY);\n    if (d2 === 0) return 0;\n    var d3 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.maxX, bbox.minY, bbox.maxX, bbox.maxY);\n    if (d3 === 0) return 0;\n    var d4 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.maxY, bbox.maxX, bbox.maxY);\n    if (d4 === 0) return 0;\n    return Math.min(d1, d2, d3, d4);\n}\n\nfunction inside(a, bbox) {\n    return a[0] >= bbox.minX &&\n           a[0] <= bbox.maxX &&\n           a[1] >= bbox.minY &&\n           a[1] <= bbox.maxY;\n}\n\n// check if the edge (a,b) doesn't intersect any other edges\nfunction noIntersections(a, b, segTree) {\n    var minX = Math.min(a[0], b[0]);\n    var minY = Math.min(a[1], b[1]);\n    var maxX = Math.max(a[0], b[0]);\n    var maxY = Math.max(a[1], b[1]);\n\n    var edges = segTree.search({minX: minX, minY: minY, maxX: maxX, maxY: maxY});\n    for (var i = 0; i < edges.length; i++) {\n        if (intersects(edges[i].p, edges[i].next.p, a, b)) return false;\n    }\n    return true;\n}\n\n// check if the edges (p1,q1) and (p2,q2) intersect\nfunction intersects(p1, q1, p2, q2) {\n    return p1 !== q2 && q1 !== p2 &&\n        orient(p1, q1, p2) > 0 !== orient(p1, q1, q2) > 0 &&\n        orient(p2, q2, p1) > 0 !== orient(p2, q2, q1) > 0;\n}\n\n// update the bounding box of a node's edge\nfunction updateBBox(node) {\n    var p1 = node.p;\n    var p2 = node.next.p;\n    node.minX = Math.min(p1[0], p2[0]);\n    node.minY = Math.min(p1[1], p2[1]);\n    node.maxX = Math.max(p1[0], p2[0]);\n    node.maxY = Math.max(p1[1], p2[1]);\n    return node;\n}\n\n// speed up convex hull by filtering out points inside quadrilateral formed by 4 extreme points\nfunction fastConvexHull(points) {\n    var left = points[0];\n    var top = points[0];\n    var right = points[0];\n    var bottom = points[0];\n\n    // find the leftmost, rightmost, topmost and bottommost points\n    for (var i = 0; i < points.length; i++) {\n        var p = points[i];\n        if (p[0] < left[0]) left = p;\n        if (p[0] > right[0]) right = p;\n        if (p[1] < top[1]) top = p;\n        if (p[1] > bottom[1]) bottom = p;\n    }\n\n    // filter out points that are inside the resulting quadrilateral\n    var cull = [left, top, right, bottom];\n    var filtered = cull.slice();\n    for (i = 0; i < points.length; i++) {\n        if (!pointInPolygon(points[i], cull)) filtered.push(points[i]);\n    }\n\n    // get convex hull around the filtered points\n    var indices = convexHull(filtered);\n\n    // return the hull as array of points (rather than indices)\n    var hull = [];\n    for (i = 0; i < indices.length; i++) hull.push(filtered[indices[i]]);\n    return hull;\n}\n\n// create a new node in a doubly linked list\nfunction insertNode(p, prev) {\n    var node = {\n        p: p,\n        prev: null,\n        next: null,\n        minX: 0,\n        minY: 0,\n        maxX: 0,\n        maxY: 0\n    };\n\n    if (!prev) {\n        node.prev = node;\n        node.next = node;\n\n    } else {\n        node.next = prev.next;\n        node.prev = prev;\n        prev.next.prev = node;\n        prev.next = node;\n    }\n    return node;\n}\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n\n    var dx = p1[0] - p2[0],\n        dy = p1[1] - p2[1];\n\n    return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction sqSegDist(p, p1, p2) {\n\n    var x = p1[0],\n        y = p1[1],\n        dx = p2[0] - x,\n        dy = p2[1] - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = p2[0];\n            y = p2[1];\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = p[0] - x;\n    dy = p[1] - y;\n\n    return dx * dx + dy * dy;\n}\n\n// segment to segment distance, ported from http://geomalgorithms.com/a07-_distance.html by Dan Sunday\nfunction sqSegSegDist(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var ux = x1 - x0;\n    var uy = y1 - y0;\n    var vx = x3 - x2;\n    var vy = y3 - y2;\n    var wx = x0 - x2;\n    var wy = y0 - y2;\n    var a = ux * ux + uy * uy;\n    var b = ux * vx + uy * vy;\n    var c = vx * vx + vy * vy;\n    var d = ux * wx + uy * wy;\n    var e = vx * wx + vy * wy;\n    var D = a * c - b * b;\n\n    var sc, sN, tc, tN;\n    var sD = D;\n    var tD = D;\n\n    if (D === 0) {\n        sN = 0;\n        sD = 1;\n        tN = e;\n        tD = c;\n    } else {\n        sN = b * e - c * d;\n        tN = a * e - b * d;\n        if (sN < 0) {\n            sN = 0;\n            tN = e;\n            tD = c;\n        } else if (sN > sD) {\n            sN = sD;\n            tN = e + b;\n            tD = c;\n        }\n    }\n\n    if (tN < 0.0) {\n        tN = 0.0;\n        if (-d < 0.0) sN = 0.0;\n        else if (-d > a) sN = sD;\n        else {\n            sN = -d;\n            sD = a;\n        }\n    } else if (tN > tD) {\n        tN = tD;\n        if ((-d + b) < 0.0) sN = 0;\n        else if (-d + b > a) sN = sD;\n        else {\n            sN = -d + b;\n            sD = a;\n        }\n    }\n\n    sc = sN === 0 ? 0 : sN / sD;\n    tc = tN === 0 ? 0 : tN / tD;\n\n    var cx = (1 - sc) * x0 + sc * x1;\n    var cy = (1 - sc) * y0 + sc * y1;\n    var cx2 = (1 - tc) * x2 + tc * x3;\n    var cy2 = (1 - tc) * y2 + tc * y3;\n    var dx = cx2 - cx;\n    var dy = cy2 - cy;\n\n    return dx * dx + dy * dy;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/concaveman/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/concaveman/index.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}}],"sources":{"node_modules/concaveman/index.js":"'use strict';\n\nvar rbush = require('rbush');\nvar convexHull = require('monotone-convex-hull-2d');\nvar Queue = require('tinyqueue');\nvar pointInPolygon = require('point-in-polygon');\nvar orient = require('robust-orientation')[3];\n\nmodule.exports = concaveman;\nmodule.exports.default = concaveman;\n\nfunction concaveman(points, concavity, lengthThreshold) {\n    // a relative measure of concavity; higher value means simpler hull\n    concavity = Math.max(0, concavity === undefined ? 2 : concavity);\n\n    // when a segment goes below this length threshold, it won't be drilled down further\n    lengthThreshold = lengthThreshold || 0;\n\n    // start with a convex hull of the points\n    var hull = fastConvexHull(points);\n\n    // index the points with an R-tree\n    var tree = rbush(16, ['[0]', '[1]', '[0]', '[1]']).load(points);\n\n    // turn the convex hull into a linked list and populate the initial edge queue with the nodes\n    var queue = [];\n    for (var i = 0, last; i < hull.length; i++) {\n        var p = hull[i];\n        tree.remove(p);\n        last = insertNode(p, last);\n        queue.push(last);\n    }\n\n    // index the segments with an R-tree (for intersection checks)\n    var segTree = rbush(16);\n    for (i = 0; i < queue.length; i++) segTree.insert(updateBBox(queue[i]));\n\n    var sqConcavity = concavity * concavity;\n    var sqLenThreshold = lengthThreshold * lengthThreshold;\n\n    // process edges one by one\n    while (queue.length) {\n        var node = queue.shift();\n        var a = node.p;\n        var b = node.next.p;\n\n        // skip the edge if it's already short enough\n        var sqLen = getSqDist(a, b);\n        if (sqLen < sqLenThreshold) continue;\n\n        var maxSqLen = sqLen / sqConcavity;\n\n        // find the best connection point for the current edge to flex inward to\n        p = findCandidate(tree, node.prev.p, a, b, node.next.next.p, maxSqLen, segTree);\n\n        // if we found a connection and it satisfies our concavity measure\n        if (p && Math.min(getSqDist(p, a), getSqDist(p, b)) <= maxSqLen) {\n            // connect the edge endpoints through this point and add 2 new edges to the queue\n            queue.push(node);\n            queue.push(insertNode(p, node));\n\n            // update point and segment indexes\n            tree.remove(p);\n            segTree.remove(node);\n            segTree.insert(updateBBox(node));\n            segTree.insert(updateBBox(node.next));\n        }\n    }\n\n    // convert the resulting hull linked list to an array of points\n    node = last;\n    var concave = [];\n    do {\n        concave.push(node.p);\n        node = node.next;\n    } while (node !== last);\n\n    concave.push(node.p);\n\n    return concave;\n}\n\nfunction findCandidate(tree, a, b, c, d, maxDist, segTree) {\n    var queue = new Queue(null, compareDist);\n    var node = tree.data;\n\n    // search through the point R-tree with a depth-first search using a priority queue\n    // in the order of distance to the edge (b, c)\n    while (node) {\n        for (var i = 0; i < node.children.length; i++) {\n            var child = node.children[i];\n\n            var dist = node.leaf ? sqSegDist(child, b, c) : sqSegBoxDist(b, c, child);\n            if (dist > maxDist) continue; // skip the node if it's farther than we ever need\n\n            queue.push({\n                node: child,\n                dist: dist\n            });\n        }\n\n        while (queue.length && !queue.peek().node.children) {\n            var item = queue.pop();\n            var p = item.node;\n\n            // skip all points that are as close to adjacent edges (a,b) and (c,d),\n            // and points that would introduce self-intersections when connected\n            var d0 = sqSegDist(p, a, b);\n            var d1 = sqSegDist(p, c, d);\n            if (item.dist < d0 && item.dist < d1 &&\n                noIntersections(b, p, segTree) &&\n                noIntersections(c, p, segTree)) return p;\n        }\n\n        node = queue.pop();\n        if (node) node = node.node;\n    }\n\n    return null;\n}\n\nfunction compareDist(a, b) {\n    return a.dist - b.dist;\n}\n\n// square distance from a segment bounding box to the given one\nfunction sqSegBoxDist(a, b, bbox) {\n    if (inside(a, bbox) || inside(b, bbox)) return 0;\n    var d1 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.maxX, bbox.minY);\n    if (d1 === 0) return 0;\n    var d2 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.minX, bbox.maxY);\n    if (d2 === 0) return 0;\n    var d3 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.maxX, bbox.minY, bbox.maxX, bbox.maxY);\n    if (d3 === 0) return 0;\n    var d4 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.maxY, bbox.maxX, bbox.maxY);\n    if (d4 === 0) return 0;\n    return Math.min(d1, d2, d3, d4);\n}\n\nfunction inside(a, bbox) {\n    return a[0] >= bbox.minX &&\n           a[0] <= bbox.maxX &&\n           a[1] >= bbox.minY &&\n           a[1] <= bbox.maxY;\n}\n\n// check if the edge (a,b) doesn't intersect any other edges\nfunction noIntersections(a, b, segTree) {\n    var minX = Math.min(a[0], b[0]);\n    var minY = Math.min(a[1], b[1]);\n    var maxX = Math.max(a[0], b[0]);\n    var maxY = Math.max(a[1], b[1]);\n\n    var edges = segTree.search({minX: minX, minY: minY, maxX: maxX, maxY: maxY});\n    for (var i = 0; i < edges.length; i++) {\n        if (intersects(edges[i].p, edges[i].next.p, a, b)) return false;\n    }\n    return true;\n}\n\n// check if the edges (p1,q1) and (p2,q2) intersect\nfunction intersects(p1, q1, p2, q2) {\n    return p1 !== q2 && q1 !== p2 &&\n        orient(p1, q1, p2) > 0 !== orient(p1, q1, q2) > 0 &&\n        orient(p2, q2, p1) > 0 !== orient(p2, q2, q1) > 0;\n}\n\n// update the bounding box of a node's edge\nfunction updateBBox(node) {\n    var p1 = node.p;\n    var p2 = node.next.p;\n    node.minX = Math.min(p1[0], p2[0]);\n    node.minY = Math.min(p1[1], p2[1]);\n    node.maxX = Math.max(p1[0], p2[0]);\n    node.maxY = Math.max(p1[1], p2[1]);\n    return node;\n}\n\n// speed up convex hull by filtering out points inside quadrilateral formed by 4 extreme points\nfunction fastConvexHull(points) {\n    var left = points[0];\n    var top = points[0];\n    var right = points[0];\n    var bottom = points[0];\n\n    // find the leftmost, rightmost, topmost and bottommost points\n    for (var i = 0; i < points.length; i++) {\n        var p = points[i];\n        if (p[0] < left[0]) left = p;\n        if (p[0] > right[0]) right = p;\n        if (p[1] < top[1]) top = p;\n        if (p[1] > bottom[1]) bottom = p;\n    }\n\n    // filter out points that are inside the resulting quadrilateral\n    var cull = [left, top, right, bottom];\n    var filtered = cull.slice();\n    for (i = 0; i < points.length; i++) {\n        if (!pointInPolygon(points[i], cull)) filtered.push(points[i]);\n    }\n\n    // get convex hull around the filtered points\n    var indices = convexHull(filtered);\n\n    // return the hull as array of points (rather than indices)\n    var hull = [];\n    for (i = 0; i < indices.length; i++) hull.push(filtered[indices[i]]);\n    return hull;\n}\n\n// create a new node in a doubly linked list\nfunction insertNode(p, prev) {\n    var node = {\n        p: p,\n        prev: null,\n        next: null,\n        minX: 0,\n        minY: 0,\n        maxX: 0,\n        maxY: 0\n    };\n\n    if (!prev) {\n        node.prev = node;\n        node.next = node;\n\n    } else {\n        node.next = prev.next;\n        node.prev = prev;\n        prev.next.prev = node;\n        prev.next = node;\n    }\n    return node;\n}\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n\n    var dx = p1[0] - p2[0],\n        dy = p1[1] - p2[1];\n\n    return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction sqSegDist(p, p1, p2) {\n\n    var x = p1[0],\n        y = p1[1],\n        dx = p2[0] - x,\n        dy = p2[1] - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = p2[0];\n            y = p2[1];\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = p[0] - x;\n    dy = p[1] - y;\n\n    return dx * dx + dy * dy;\n}\n\n// segment to segment distance, ported from http://geomalgorithms.com/a07-_distance.html by Dan Sunday\nfunction sqSegSegDist(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var ux = x1 - x0;\n    var uy = y1 - y0;\n    var vx = x3 - x2;\n    var vy = y3 - y2;\n    var wx = x0 - x2;\n    var wy = y0 - y2;\n    var a = ux * ux + uy * uy;\n    var b = ux * vx + uy * vy;\n    var c = vx * vx + vy * vy;\n    var d = ux * wx + uy * wy;\n    var e = vx * wx + vy * wy;\n    var D = a * c - b * b;\n\n    var sc, sN, tc, tN;\n    var sD = D;\n    var tD = D;\n\n    if (D === 0) {\n        sN = 0;\n        sD = 1;\n        tN = e;\n        tD = c;\n    } else {\n        sN = b * e - c * d;\n        tN = a * e - b * d;\n        if (sN < 0) {\n            sN = 0;\n            tN = e;\n            tD = c;\n        } else if (sN > sD) {\n            sN = sD;\n            tN = e + b;\n            tD = c;\n        }\n    }\n\n    if (tN < 0.0) {\n        tN = 0.0;\n        if (-d < 0.0) sN = 0.0;\n        else if (-d > a) sN = sD;\n        else {\n            sN = -d;\n            sD = a;\n        }\n    } else if (tN > tD) {\n        tN = tD;\n        if ((-d + b) < 0.0) sN = 0;\n        else if (-d + b > a) sN = sD;\n        else {\n            sN = -d + b;\n            sD = a;\n        }\n    }\n\n    sc = sN === 0 ? 0 : sN / sD;\n    tc = tN === 0 ? 0 : tN / tD;\n\n    var cx = (1 - sc) * x0 + sc * x1;\n    var cy = (1 - sc) * y0 + sc * y1;\n    var cx2 = (1 - tc) * x2 + tc * x3;\n    var cy2 = (1 - tc) * y2 + tc * y3;\n    var dx = cx2 - cx;\n    var dy = cy2 - cy;\n\n    return dx * dx + dy * dy;\n}\n"},"lineCount":341}},"error":null,"hash":"56ae673c78e31d03cb0b1fa6f8e430c1","cacheData":{"env":{}}}