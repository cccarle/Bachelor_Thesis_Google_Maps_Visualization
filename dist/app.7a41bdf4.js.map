{"version":3,"sources":["node_modules/load-google-maps-api/index.js","models/map.js","app.js"],"names":["loadGoogleMapsApi","require","Map","key","libraries","googleMaps","mapElement","center","lat","lng","zoom","mapTypeId","maps","heatmap","fs","cords_full","cords_half","cords_mix","dataset_1","JSON","parse","dataset_2","dataset_3","datasetOneButton","document","getElementById","datasetTwoButton","datasetThreeButton","searchRadiusButton","arr","covertToGoogleMapsCords","data","map","cord","window","google","LatLng","location","weight","initMap","addEventListener","then","createMap","createHeatmapLayer","writePositionsToJSONByClick","coordinates","visualization","HeatmapLayer","setMap","set","get","inputValue","querySelector","value","event","addListener","push","latLng"],"mappings":"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","file":"app.7a41bdf4.js","sourceRoot":"..","sourcesContent":["const API_URL = 'https://maps.googleapis.com/maps/api/js'\nconst CALLBACK_NAME = '__googleMapsApiOnLoadCallback'\n\nconst optionsKeys = ['channel', 'client', 'key', 'language', 'region', 'v']\n\nlet promise = null\n\nmodule.exports = function (options = {}) {\n  promise =\n    promise ||\n    new Promise(function (resolve, reject) {\n      // Reject the promise after a timeout\n      const timeoutId = setTimeout(function () {\n        window[CALLBACK_NAME] = function () {} // Set the on load callback to a no-op\n        reject(new Error('Could not load the Google Maps API'))\n      }, options.timeout || 10000)\n\n      // Hook up the on load callback\n      window[CALLBACK_NAME] = function () {\n        if (timeoutId !== null) {\n          clearTimeout(timeoutId)\n        }\n        resolve(window.google.maps)\n        delete window[CALLBACK_NAME]\n      }\n\n      // Prepare the `script` tag to be inserted into the page\n      const scriptElement = document.createElement('script')\n      const params = [`callback=${CALLBACK_NAME}`]\n      optionsKeys.forEach(function (key) {\n        if (options[key]) {\n          params.push(`${key}=${options[key]}`)\n        }\n      })\n      if (options.libraries && options.libraries.length) {\n        params.push(`libraries=${options.libraries.join(',')}`)\n      }\n      scriptElement.src = `${options.apiUrl || API_URL}?${params.join('&')}`\n\n      // Insert the `script` tag\n      document.body.appendChild(scriptElement)\n    })\n  return promise\n}\n","const loadGoogleMapsApi = require('load-google-maps-api')\n\n/* \nClass for generating new \"google-map\" with visualization as library.\nVisualization allows Heatmaplayer.\n\nTODO: \nMake center positions dynamic\n*/\n\nclass Map {\n  static loadGoogleMapsApi() {\n    return loadGoogleMapsApi({\n      key: 'AIzaSyDVxL_-voEagurltC-HoSJk9WvgFMmkTAU',\n      libraries: ['visualization']\n    })\n  }\n  static createMap(googleMaps, mapElement) {\n    return new googleMaps.Map(mapElement, {\n      center: { lat: 56.657081713112085, lng: 16.321899075213206 },\n      zoom: 19,\n      mapTypeId: 'satellite'\n    })\n  }\n}\n\nexport { Map }\n","import { Map } from './models/map'\nlet fs = require('fs')\nlet cords_full = fs.readFileSync('./assets/cords_full.json', 'utf8')\nlet cords_half = fs.readFileSync('./assets/cords_half.json', 'utf8')\nlet cords_mix = fs.readFileSync('./assets/cords_mix.json', 'utf8')\n\nlet dataset_1 = JSON.parse(cords_full)\nlet dataset_2 = JSON.parse(cords_half)\nlet dataset_3 = JSON.parse(cords_mix)\n\nlet datasetOneButton = document.getElementById('datasetOneButton')\nlet datasetTwoButton = document.getElementById('datasetTwoButton')\nlet datasetThreeButton = document.getElementById('datasetThreeButton')\nlet searchRadiusButton = document.getElementById('searchRadius')\n\nlet arr = []\nlet maps, googleMaps, heatmap\n\nfunction covertToGoogleMapsCords(data) {\n  return data.map(cord => {\n    return new window.google.maps.LatLng({\n      lat: cord.location.lat,\n      lng: cord.location.lng,\n      weight: cord.weight\n    })\n  })\n}\n\n/* \nCreate map when DOM is loaded.\nSet up listener for adding new posotions to heatmap layer.\n*/\n\nconst initMap = function _initMap() {\n  document.addEventListener('DOMContentLoaded', () => {\n    let mapElement = document.getElementById('map')\n    Map.loadGoogleMapsApi().then(google => {\n      googleMaps = google\n      maps = new Map.createMap(googleMaps, mapElement)\n\n      createHeatmapLayer()\n      writePositionsToJSONByClick()\n    })\n  })\n}\n\n/* \nCreate Heatmap-layer with coordinates array. \n*/\n\nconst createHeatmapLayer = coordinates => {\n  heatmap = new googleMaps.visualization.HeatmapLayer({\n    data: coordinates || []\n  })\n\n  heatmap.setMap(maps)\n  let gradient = [\n    'rgba(0, 255, 255, 0)',\n    'rgba(0, 255, 255, 1)',\n    'rgba(0, 191, 255, 1)',\n    'rgba(0, 127, 255, 1)',\n    'rgba(0, 63, 255, 1)',\n    'rgba(0, 0, 255, 1)',\n    'rgba(0, 0, 223, 1)',\n    'rgba(0, 0, 191, 1)',\n    'rgba(0, 0, 159, 1)',\n    'rgba(0, 0, 127, 1)',\n    'rgba(63, 0, 91, 1)',\n    'rgba(127, 0, 63, 1)',\n    'rgba(191, 0, 31, 1)',\n    'rgba(255, 0, 0, 1)'\n  ]\n  heatmap.set('gradient', heatmap.get('gradient') ? null : gradient)\n}\n\nsearchRadiusButton.addEventListener('click', () => {\n  let inputValue = document.querySelector('.input').value\n  if (inputValue <= 100 && inputValue > 0) {\n    heatmap.set('radius', heatmap.get('radius') ? inputValue : inputValue)\n  }\n})\n\n/* \nAppends the \"click-positions\" longiture & latitude to the coordinates array.\n*/\n\nconst writePositionsToJSONByClick = () => {\n  googleMaps.event.addListener(maps, 'click', event => {\n    arr.push({\n      location: new googleMaps.LatLng(event.latLng.lat(), event.latLng.lng()),\n      weight: 100\n    })\n    createHeatmapLayer(arr)\n  })\n}\n\ndatasetOneButton.addEventListener('click', () => {\n  createHeatmapLayer(covertToGoogleMapsCords(dataset_1))\n})\n\ndatasetTwoButton.addEventListener('click', () => {\n  createHeatmapLayer(covertToGoogleMapsCords(dataset_2))\n})\n\ndatasetThreeButton.addEventListener('click', () => {\n  createHeatmapLayer(covertToGoogleMapsCords(dataset_3))\n})\n\ninitMap()\n"]}